import java.lang.annotation.*;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Objects;


@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD})
@interface CamelCase {
}


class CheckCamelCase {
    public static final String CAMELCASE_PATTERN = "(^[a-z])([a-z0-9]+)(([A-Z]?[a-z0-9]*)*)";

    @SuppressWarnings("unchecked")
    public static boolean checkAndPrint(Class clazz) {
        boolean result = false;
        Method[] methods = clazz.getMethods();
        for (Method methodElem : methods) {
            Annotation[] annotations = methodElem.getAnnotations();
            for (Annotation anElem : annotations) {
                if (anElem instanceof CamelCase) {
                    if (methodElem.getName().matches(CAMELCASE_PATTERN)) {
                        result = true;
                    } else {
                        String message = "";
                        message = "method " + clazz.getName() + "." + methodElem.getName() + " doesn't satisfy camelCase naming convention";
                        System.out.println(message);
                    }
                }


            }

        }

        return result;
    }

}


class ClassForAnnot {
    @CamelCase
    public static void example() {
    }

    @CamelCase
    public void Example() {
    }

    public static void _main(String args[]) {
    }
}
public class Class1{
@CamelCase
public void correct(){} 
@CamelCase
public void InCorrect(){} 
@CamelCase
public void JustMethod(){}
}

public class Class2{
@CamelCase
public void correct(){} 
@CamelCase
public void oneMoreCorrect(){} 
}
