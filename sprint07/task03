import java.lang.annotation.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.TYPE})
@interface TestSuite {
   String [] value();
}

public class TestSuitHandler {

    @SuppressWarnings ( "unchecked" )
    public static void run(Class <?> clazz){
        Annotation[] annotations = clazz.getAnnotations();
        if (annotations.length==0){
            System.out.println("Class " + clazz.getName() + " isn't annotated");
        }
        else{
            for (Annotation annElem: annotations){
                if (annElem instanceof TestSuite){
                  for (int i = 0; i<((TestSuite)annElem).value().length; i++){
                 try{
                 Method method = clazz.getMethod(((TestSuite)annElem).value()[i]);
                 if (method.getParameterCount() ==0 && Modifier.isPublic(method.getModifiers()) && !Modifier.isStatic(method.getModifiers())){
                     System.out.println("\t -- Method " + clazz.getName() + '.' + method.getName() + " started --");
                     method.invoke(clazz.getDeclaredConstructor ().newInstance ());
                     System.out.println("\t -- Method " + clazz.getName() + '.' + method.getName() + " finished --");
                 }

                 } catch (NoSuchMethodException e) {
                     System.out.println("Method with name " + ((TestSuite)annElem).value()[i].toString() + " doesn't exists or not public in class " + clazz.getName());
                 } catch (IllegalAccessException e) {
                     e.printStackTrace();
                 } catch (InstantiationException e) {
                     e.printStackTrace();
                 } catch (InvocationTargetException e) {
                     e.printStackTrace();
                 }

                  }
                }
                else{
                    System.out.println("Class " + clazz.getName() + " isn't annotated");
                }
            }

        }

    }
}
