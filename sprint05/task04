public class Person {
    private String firstName;
    private String lastName;
    private String idCode;
    String pattern = "^[A-Z][a-z\\s\\-]+";


    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) throws NameException {
        if (!firstName.matches(pattern)) {
            throw new NameException("Incorrect value " + firstName + " for firstName" + " (should start from upper case and contains only alphabetic characters and symbols -, _)");
        }
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) throws NameException {
        if (!lastName.matches(pattern)) {
            throw new NameException("Incorrect value " + lastName + " for lastName" + " (should start from upper case and contains only alphabetic characters and symbols -, _)");
        }
        this.lastName = lastName;
    }

    public String getIdCode() {
        return idCode;
    }

    public void setIdCode(String idCode) throws CodeException {
        String pattern = "\\d{10}";
        if (!idCode.matches(pattern)) {
            throw new CodeException("Incorrect value " + idCode + " for code"+" (should contains exactly 10 digits)");
        }
        this.idCode = idCode;
    }

    @Override
    public String toString() {
        return firstName + " " + lastName + ':' + " " + idCode;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Person person = (Person) o;
        return Objects.equals(firstName, person.firstName) &&
                Objects.equals(lastName, person.lastName) &&
                Objects.equals(idCode, person.idCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName, idCode);
    }

    static Person buildPerson(String firstName, String lastName, String idCode) throws CodeException, NameException {
        Person person = new Person();
        List<String> list = new ArrayList<>();

        try {
            person.setFirstName(firstName);
        }catch (NameException ex){
            list.add(ex.getMessage());
        }

        try {
            person.setLastName(lastName);
        }catch (NameException ex){
            list.add(ex.getMessage());
        }

        try {
            person.setIdCode(idCode);
        }catch (CodeException ex){
            list.add(ex.getMessage());
        }

        if (!list.isEmpty()){
            StringBuilder mes= new StringBuilder();
            for (int i=0; i<list.size(); i++){
                mes.append(list.get(i));
                if (i!=list.size()-1){
                    mes.append("; ");
                }
            }
            throw new IllegalArgumentException(String.valueOf(mes));
        }

        return person;
    }
}

class NameException extends RuntimeException {
    public NameException(String message) {
        super(message);
    }
}

class CodeException extends RuntimeException {
    public CodeException(String message) {
        super(message);
    }
}
