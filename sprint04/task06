import java.util.Arrays;
import java.util.Comparator;

public class Person {
    protected String name;
    protected int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Age=" + age;
    }
}

class Employee extends Person {
    private double salary;

    public Employee(String name, int age, double salary) {
        super(name, age);
        this.salary = salary;
    }

    public double getSalary() {
        return salary;
    }


    public String toString() {
        return super.name + ", Salary: " + salary;
    }
}

class Developer extends Employee {
    private Level level;

    public Developer(String name, int age, double salary, Level level) {
        super(name, age, salary);
        this.level = level;
    }

    public Level getLevel() {
        return level;
    }

    @Override
    public String toString() {
        return super.toString() + ",  Level: " + level.name();
    }
}

enum Level {
    JUNIOR, MIDDLE, SENIOR
}


class PersonComparator implements Comparator<Person> {

    @Override
    public int compare(Person o1, Person o2) {
        if (!o1.getName().equals(o2.getName())) {
            return o1.getName().compareTo(o2.getName());
        } else {
            return o1.getAge() - o2.getAge();
        }

    }
}

class EmployeeComparator implements Comparator<Employee> {
    @Override
    public int compare(Employee o1, Employee o2) {
        int compare = (new PersonComparator()).compare(o1, o2);
        return compare != 0 ? compare : (int) (o1.getSalary() - o2.getSalary());
    }
}

class DeveloperComparator implements Comparator<Developer> {
    @Override
    public int compare(Developer o1, Developer o2) {
        int compare = (new EmployeeComparator()).compare(o1, o2);
        return compare != 0 ? compare : (int) o1.getLevel().compareTo(o2.getLevel());

    }
}

class Utility {

    public static <T extends Person> void sortPeople(T[] persons, Comparator<? super T> comparator) {
        Arrays.sort(persons, comparator);
    }
}
